.font-weight {
   @include modifier('thin') { font-weight: 100 !important; }
   @include modifier('xlight') { font-weight: 200 !important; }
   @include modifier('light') { font-weight: 300 !important; }
   @include modifier('regular') { font-weight: 400 !important; }
   @include modifier('medium') { font-weight: 500 !important; }
   @include modifier('semi-bold') { font-weight: 600 !important; }
   @include modifier('bold') { font-weight: 700 !important; }
   @include modifier('xbold') { font-weight: 800 !important; }
   @include modifier('black') { font-weight: 900 !important; }
}

.text {
   &-align {
      @include modifier('left') { text-align: left !important; }
      @include modifier('right') { text-align: right !important; }
      @include modifier('center') { text-align: center !important; }
   }

   &-transform {
      @include modifier('uppercase') { text-transform: uppercase !important; }
      @include modifier('lowercase') { text-transform: lowercase !important; }
      @include modifier('capitalize') { text-transform: capitalize !important; }
      @include modifier('full-width') { text-transform: full-width !important; }
   }

   &-hide {
      overflow: hidden;
      text-indent: 100%;
      white-space: nowrap;
   }
}



@each $key, $family in $font-families {
   .font {
      @include modifier($key) { font-family: $family; }
   }
}

@each $key, $breakpoint in $breakpoints {
   .text {
      &-align {
         @include resize-to($key, 'left') { text-align: left !important; }
         @include resize-to($key, 'right') { text-align: right !important; }
         @include resize-to($key, 'center') { text-align: center !important; }
      }

      &-transform {
         @include resize-to($key, 'uppercase') { text-transform: uppercase !important; }
         @include resize-to($key, 'lowercase') { text-transform: lowercase !important; }
         @include resize-to($key, 'capitalize') { text-transform: capitalize !important; }
         @include resize-to($key, 'full-width') { text-transform: full-width !important; }
      }

      &-hide {
         overflow: hidden;
         text-indent: 100%;
         white-space: nowrap;
      }
   }
}

$i: 1;
@each $value in $font-sizes {
   .font-size {
      @include value-modifier($i) { font-size: $value; }
      $i: $i + 1;
   }

   @each $key, $breakpoint in $breakpoints {
      @include resize-to($key, false, $value) { font-size: $value; }
   }
}

@for $i from 0 to 20 {
   .letter-spacing {
      @include value-modifier($i) { letter-spacing: #{$i}px; }

      @if ($i > 0) {
         @include value-modifier('-#{$i}') { letter-spacing: -#{$i}px; }
      }
   }

   .line-height {
      @include value-modifier($i) { line-height: #{$i} / 10; }
   }

   @each $key, $breakpoint in $breakpoints {
      .letter-spacing {
         @include resize-to($key, false, $i) { letter-spacing: #{$i}px; }

         @if ($i > 0) {
            @include resize-to($key, false, '-#{$i}') { letter-spacing: -#{$i}px; }
         }
      }

      .line-height {
         @include resize-to($key, false, $i) { line-height: #{$i} / 10; }
      }
   }
}
