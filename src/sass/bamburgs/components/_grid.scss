$block-width: 100% / $grid-columns;

@mixin gutters() {
   @if $grid-gutter-setting == 'split'  {
      padding-left: $grid-gutter / 2;
      padding-right: $grid-gutter / 2;
   } @else {
      padding-left: $grid-gutter;
      padding-right: $grid-gutter;
   }
}

@mixin row() {
   align-content: center;
   align-items: flex-start;
   display: flex;
   flex: 1 0 auto;
   flex-direction: row;
   flex-wrap: wrap;
   justify-content: flex-start;
}

@mixin row-compensate() {
   $row-compensation: $grid-gutter * -1;

   @if $grid-gutter-setting == 'split' {
      $row-compensation: $row-compensation / 2;
   }

   margin-right: $row-compensation;
   margin-left: $row-compensation;
}

@mixin column($value) {
   @include gutters();

   @if ($value != 'auto' or $value != auto) {
      $value: $value * $block-width;
   }
   flex: 1 0 $value;
   max-width: $value;
   position: relative;
}

@mixin push($value) {
   margin-left: $value * $block-width;
}

@mixin pull($value) {
   margin-left: auto;
   margin-right: $value * $block-width;
}



@if ($use-flexbox-grid == true) {
   .row {
      @include row();

      .row {
         @include row-compensate();
      }
   }

   @each $key, $breakpoint in $breakpoint-list {
      .col {
         @include column(auto);

         @include builder ((modifier: 'first', query: $key)) { order: 0; }
         @include builder ((modifier: 'last', query: $key)) { order: 1; }
      }

      @for $i from 1 through $grid-columns {
         .col {
            @include builder ((value: $i, query: $key)) { @include column($i); }
         }

         .push {
            @include builder ((value: $i, query: $key)) { @include push($i); }
         }
         .pull {
            @include builder ((value: $i, query: $key)) { @include pull($i); }
         }
      }

      .pull {
         @include builder ((value: 'right', query: $key)) {
            margin-left: auto;
            margin-right: 0;
         }
      }
   }
}
