$increment: false;
$responsive: true;
$have-states: false;

@mixin gutters() {
   @if $grid-gutter-setting == 'split'  {
      padding-left: $grid-gutter / 2;
      padding-right: $grid-gutter / 2;
   } @else {
      padding-left: $grid-gutter;
      padding-right: $grid-gutter;
   }
}

@mixin row() {
   align-content: center;
   align-items: flex-start;
   display: flex;
   flex: 1 0 auto;
   flex-direction: row;
   flex-wrap: wrap;
   justify-content: flex-start;
}

@mixin row-compensate() {
   $row-compensation: $grid-gutter * -1;

   @if $grid-gutter-setting == 'split' {
      $row-compensation: $row-compensation / 2;
   }

   margin-right: $row-compensation;
   margin-left: $row-compensation;
}

@mixin column($value) {
   @include gutters();

   @if ($value != 'auto' or $value != auto) {
      $value: $value * $block-width;
   }
   flex: 1 0 $value;
   max-width: $value;
   position: relative;
}

@mixin push($value) {
   margin-left: $value * $block-width;
}

@mixin pull($value) {
   margin-left: auto;
   margin-right: $value * $block-width;
}


@mixin class($state, $type) {
   #{$type}row {
      @include row();

      .row {
         @include row-compensate();
      }
   }

   #{$type}col {
      @include column(auto);

      &-first { order: 0; }
      &-last { order: 1; }
   }

   #{$type}pull-right {
      margin-left: auto;
      margin-right: 0;
      }
}

@mixin classes($i, $state, $type) {
   #{$type}col-#{$i} { @include column($i);}
   #{$type}push-#{$i} { @include push($i); }
   #{$type}pull-#{$i} {@include pull($i); }
}

@if ($use-flexbox-grid == true) {
   @include build($increment, $state, $have-states);

   @for $i from 1 through $grid-columns {
      @include build($i, $state, $have-states);
   }
}

